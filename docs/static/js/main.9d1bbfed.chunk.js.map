{"version":3,"sources":["SVGRenderer.js","App.js","reportWebVitals.js","index.js"],"names":["SVGRenderer","useState","direction","toggleDirection","reset","setReset","filterId","setFilterId","pathRef","useRef","onClick","config","slow","reverse","from","dr","cx","cy","r","scale","baseFreq","numOctaves","to","duration","props","xmlns","width","height","viewBox","id","baseFrequency","result","seed","in","in2","style","stroke","strokeWidth","ref","fill","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OA8EeA,EAvEK,WAAO,IAAD,IACaC,oBAAS,GADtB,mBACjBC,EADiB,KACNC,EADM,OAEEF,oBAAS,GAFX,mBAEjBG,EAFiB,KAEVC,EAFU,OAGQJ,mBAAS,GAHjB,mBAGjBK,EAHiB,KAGPC,EAHO,KAIlBC,EAAUC,mBAIhB,OACE,qBAAKC,QAAS,WAAQH,EAAYD,EAAW,EAAI,EAAIA,EAAS,IAA9D,SACE,cAAC,UAAD,GACEK,OAAQA,SAAOC,KACfR,MAAOA,EACPS,QAASX,EACTY,KAAM,CAAEC,GAAI,GAAIC,GAAI,IAAKC,GAAI,IAAKC,EAAG,IAAKC,MAAO,EAAGC,SAAU,IAAMC,WAAY,GAChFC,GAAI,CAAEP,GAAI,EAAGC,GAAI,IAAKC,GAAI,IAAKC,EAAG,IAAKC,MAAO,GAAIC,SAAU,GAAKC,WAAY,IAL/E,uBAMU,CAAEE,SAAU,MANtB,wBAOU,WAAQpB,GAAiBD,GAAYG,GAAS,MAPxD,0BAQG,SAACmB,GAAD,OACG,sBAAKC,MArBH,6BAqBiBC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,cAApD,UACE,iCACE,yBAAQC,GAAG,aAAX,UACE,8BAAcA,GAAG,aACfC,cAAeN,EAAMJ,SACrBC,WAAYG,EAAMH,WAClBU,OAAO,QACPC,KAAM,IACR,mCAAmBH,GAAG,eAAeI,GAAG,gBAAgBC,IAAI,QAAQf,MAAOK,EAAML,WAEnF,yBAAQU,GAAG,aAAX,UACE,8BAAcA,GAAG,aAAaC,cAAc,OAAOT,WAAW,IAAIU,OAAO,UACzE,mCAAmBE,GAAG,gBAAgBC,IAAI,QAAQf,MAAM,YAG5D,wBACEgB,MAAO,CAAC,OAAS,iBAAT,OAA2B7B,EAA3B,MACR8B,OAAQ,UACRC,YAAa,EACbrB,GAAIQ,EAAMR,GACVC,GAAIO,EAAMP,GACVC,EAAGM,EAAMN,EACToB,IAAK9B,EACL+B,KAAK,SAEP,wBACEJ,MAAO,CAAC,OAAS,iBAAT,OAA2B7B,EAA3B,MACR8B,OAAQ,UACRC,YAAa,EACbrB,GAAIQ,EAAMR,GACVC,GAAIO,EAAMP,GACVC,EAAGM,EAAMN,EAAEM,EAAMT,GACjBuB,IAAK9B,EACL+B,KAAK,SAEP,wBACEJ,MAAO,CAAC,OAAS,iBAAT,OAA2B7B,EAA3B,MACR8B,OAAQ,UACRC,YAAa,EACbrB,GAAIQ,EAAMR,GACVC,GAAIO,EAAMP,GACVC,EAAGM,EAAMN,EAAE,EAAEM,EAAMT,GACnBuB,IAAK9B,EACL+B,KAAK,eApDf,OCJSC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9d1bbfed.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { Spring, config } from 'react-spring/renderprops';\n\n// variable for the namespace\nconst svgns = \"http://www.w3.org/2000/svg\";\n\nconst SVGRenderer = () => {\n  const [direction, toggleDirection] = useState(false);\n  const [reset, setReset] = useState(false);\n  const [filterId, setFilterId] = useState(1);\n  const pathRef = useRef();\n\n\n\n  return (\n    <div onClick={() => { setFilterId(filterId > 0 ? 0 : filterId+1);} }>\n      <Spring\n        config={config.slow}\n        reset={reset}\n        reverse={direction}\n        from={{ dr: 20, cx: 200, cy: 200, r: 100, scale: 0, baseFreq: 0.01, numOctaves: 1  }}\n        to={{ dr: 5, cx: 175, cy: 175, r: 150, scale: 50, baseFreq: 0.1, numOctaves: 5 }}\n        config={{ duration: 2000 }}\n        onRest={() => { toggleDirection(!direction); setReset(true); }}>\n        {(props) => (\n            <svg xmlns={svgns} width=\"400\" height=\"400\" viewBox=\"0 0 400 400\">\n              <defs>\n                <filter id=\"squiggly-0\">\n                  <feTurbulence id=\"turbulence\"\n                    baseFrequency={props.baseFreq}\n                    numOctaves={props.numOctaves}\n                    result=\"noise\"\n                    seed={0} />\n                  <feDisplacementMap id=\"displacement\" in=\"SourceGraphic\" in2=\"noise\" scale={props.scale} />\n                </filter>\n                <filter id=\"squiggly-1\">\n                  <feTurbulence id=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"3\" result=\"noise\" />\n                  <feDisplacementMap in=\"SourceGraphic\" in2=\"noise\" scale=\"8\" />\n                </filter>\n              </defs>\n              <circle\n                style={{\"filter\": `url(#squiggly-${filterId})`}}\n                stroke={\"#DA251D\"}\n                strokeWidth={2}\n                cx={props.cx}\n                cy={props.cy}\n                r={props.r}\n                ref={pathRef}\n                fill=\"none\"\n              />\n              <circle\n                style={{\"filter\": `url(#squiggly-${filterId})`}}\n                stroke={\"#DA251D\"}\n                strokeWidth={2}\n                cx={props.cx}\n                cy={props.cy}\n                r={props.r+props.dr}\n                ref={pathRef}\n                fill=\"none\"\n              />\n              <circle\n                style={{\"filter\": `url(#squiggly-${filterId})`}}\n                stroke={\"#DA251D\"}\n                strokeWidth={2}\n                cx={props.cx}\n                cy={props.cy}\n                r={props.r+2*props.dr}\n                ref={pathRef}\n                fill=\"none\"\n              />\n            </svg>\n          )}\n      </Spring>\n    </div>\n  );\n}\n\nexport default SVGRenderer;\n","import './App.css';\nimport SVGRenderer from './SVGRenderer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SVGRenderer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n// <img src={svgImg} className=\"svg-img\" alt=\"svgImg\" />\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}